// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookService_AddBook_FullMethodName        = "/pb.BookService/AddBook"
	BookService_GetBooks_FullMethodName       = "/pb.BookService/GetBooks"
	BookService_GetBook_FullMethodName        = "/pb.BookService/GetBook"
	BookService_UpdateBook_FullMethodName     = "/pb.BookService/UpdateBook"
	BookService_DeleteBook_FullMethodName     = "/pb.BookService/DeleteBook"
	BookService_BorrowBook_FullMethodName     = "/pb.BookService/BorrowBook"
	BookService_ReturnBook_FullMethodName     = "/pb.BookService/ReturnBook"
	BookService_SearchBooks_FullMethodName    = "/pb.BookService/SearchBooks"
	BookService_CategoryBooks_FullMethodName  = "/pb.BookService/CategoryBooks"
	BookService_AvailableBooks_FullMethodName = "/pb.BookService/AvailableBooks"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	AddBook(ctx context.Context, in *AddBookReq, opts ...grpc.CallOption) (*BookRes, error)
	GetBooks(ctx context.Context, in *GetBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error)
	GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*BookRes, error)
	UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*BookRes, error)
	DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookRes, error)
	BorrowBook(ctx context.Context, in *BorrowBookReq, opts ...grpc.CallOption) (*BookRes, error)
	ReturnBook(ctx context.Context, in *ReturnBookReq, opts ...grpc.CallOption) (*BookRes, error)
	SearchBooks(ctx context.Context, in *SearchBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error)
	CategoryBooks(ctx context.Context, in *CategoryBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error)
	AvailableBooks(ctx context.Context, in *AvailableBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) AddBook(ctx context.Context, in *AddBookReq, opts ...grpc.CallOption) (*BookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRes)
	err := c.cc.Invoke(ctx, BookService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooks(ctx context.Context, in *GetBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], BookService_GetBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBooksReq, BookRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_GetBooksClient = grpc.ServerStreamingClient[BookRes]

func (c *bookServiceClient) GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*BookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRes)
	err := c.cc.Invoke(ctx, BookService_GetBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*BookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRes)
	err := c.cc.Invoke(ctx, BookService_UpdateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookRes)
	err := c.cc.Invoke(ctx, BookService_DeleteBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) BorrowBook(ctx context.Context, in *BorrowBookReq, opts ...grpc.CallOption) (*BookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRes)
	err := c.cc.Invoke(ctx, BookService_BorrowBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ReturnBook(ctx context.Context, in *ReturnBookReq, opts ...grpc.CallOption) (*BookRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRes)
	err := c.cc.Invoke(ctx, BookService_ReturnBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) SearchBooks(ctx context.Context, in *SearchBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[1], BookService_SearchBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchBooksReq, BookRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_SearchBooksClient = grpc.ServerStreamingClient[BookRes]

func (c *bookServiceClient) CategoryBooks(ctx context.Context, in *CategoryBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[2], BookService_CategoryBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CategoryBooksReq, BookRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_CategoryBooksClient = grpc.ServerStreamingClient[BookRes]

func (c *bookServiceClient) AvailableBooks(ctx context.Context, in *AvailableBooksReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[3], BookService_AvailableBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AvailableBooksReq, BookRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_AvailableBooksClient = grpc.ServerStreamingClient[BookRes]

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
type BookServiceServer interface {
	AddBook(context.Context, *AddBookReq) (*BookRes, error)
	GetBooks(*GetBooksReq, grpc.ServerStreamingServer[BookRes]) error
	GetBook(context.Context, *GetBookReq) (*BookRes, error)
	UpdateBook(context.Context, *UpdateBookReq) (*BookRes, error)
	DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookRes, error)
	BorrowBook(context.Context, *BorrowBookReq) (*BookRes, error)
	ReturnBook(context.Context, *ReturnBookReq) (*BookRes, error)
	SearchBooks(*SearchBooksReq, grpc.ServerStreamingServer[BookRes]) error
	CategoryBooks(*CategoryBooksReq, grpc.ServerStreamingServer[BookRes]) error
	AvailableBooks(*AvailableBooksReq, grpc.ServerStreamingServer[BookRes]) error
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) AddBook(context.Context, *AddBookReq) (*BookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookServiceServer) GetBooks(*GetBooksReq, grpc.ServerStreamingServer[BookRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServiceServer) GetBook(context.Context, *GetBookReq) (*BookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *UpdateBookReq) (*BookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) BorrowBook(context.Context, *BorrowBookReq) (*BookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (UnimplementedBookServiceServer) ReturnBook(context.Context, *ReturnBookReq) (*BookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedBookServiceServer) SearchBooks(*SearchBooksReq, grpc.ServerStreamingServer[BookRes]) error {
	return status.Errorf(codes.Unimplemented, "method SearchBooks not implemented")
}
func (UnimplementedBookServiceServer) CategoryBooks(*CategoryBooksReq, grpc.ServerStreamingServer[BookRes]) error {
	return status.Errorf(codes.Unimplemented, "method CategoryBooks not implemented")
}
func (UnimplementedBookServiceServer) AvailableBooks(*AvailableBooksReq, grpc.ServerStreamingServer[BookRes]) error {
	return status.Errorf(codes.Unimplemented, "method AvailableBooks not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).AddBook(ctx, req.(*AddBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).GetBooks(m, &grpc.GenericServerStream[GetBooksReq, BookRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_GetBooksServer = grpc.ServerStreamingServer[BookRes]

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*GetBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*UpdateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*DeleteBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_BorrowBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).BorrowBook(ctx, req.(*BorrowBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ReturnBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ReturnBook(ctx, req.(*ReturnBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_SearchBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).SearchBooks(m, &grpc.GenericServerStream[SearchBooksReq, BookRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_SearchBooksServer = grpc.ServerStreamingServer[BookRes]

func _BookService_CategoryBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CategoryBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).CategoryBooks(m, &grpc.GenericServerStream[CategoryBooksReq, BookRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_CategoryBooksServer = grpc.ServerStreamingServer[BookRes]

func _BookService_AvailableBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AvailableBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).AvailableBooks(m, &grpc.GenericServerStream[AvailableBooksReq, BookRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookService_AvailableBooksServer = grpc.ServerStreamingServer[BookRes]

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _BookService_AddBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
		{
			MethodName: "BorrowBook",
			Handler:    _BookService_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _BookService_ReturnBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _BookService_GetBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBooks",
			Handler:       _BookService_SearchBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CategoryBooks",
			Handler:       _BookService_CategoryBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AvailableBooks",
			Handler:       _BookService_AvailableBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
